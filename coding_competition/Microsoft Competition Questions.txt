Many services generate huge amounts of data when in operation. There is often a need to parse and consolidate that data to understand and improve those services. One common metric to calculate is the average of the generated data.

Given a set of data as a string of comma separated values (CSVs), write a program to calculate its average value (arithmetic mean).

Input definition

An input file for this program will contain a string of 500 or fewer comma separated integers, ranging from 1 to 1000, inclusive.

Output definition

Your output should be the integer that is the (rounded) mean of the given integers.

Example input

1,2,3,4
Example output

3








Given a matrix, calculate its transpose. If needed, further info about matrix transposes can be found at https://en.wikipedia.org/wiki/Transpose .

Input definition

An input file for this problem will contain an m by n matrix that is represented as a line-and-space-separated string. Each line corresponds to a row in the matrix. Each input file will contain m lines and each line will contain n space separated non-negative integers less than 100. Both m and n may range from 1 to 100, inclusive.

Output definition

Your output should be an n by m matrix that is the tranpose of the given matrix and is represented as a line-and-space-separated string. In particular, each row of the transposed matrix should be on its own line and each row should be space separated.

Example input

1 2 3 4
5 6 7 8
9 10 11 12
Example output

1 5 9
2 6 10
3 7 11
4 8 12







Set is a card game where players try to find a set of three cards.

Each card has four attributes and each attribute has 3 possible values:

Attribute 1: Number of objects
Values: 1, 2, 3
Attibute 2: Shading
Values: Empty, Striped, Filled
Attribute 3: Color
Values: Red, Purple, Green
Attribute 4: Shape
Values: Oval, Squiggles, Diamonds
The goal of the original game is to select 3 cards from a set of 12 such that for each attribute, either all three cards share the same value or all three cards have a different value.

Your task here is slightly different. You will be given the attribute values for two cards. For any given 2 cards, find the one and only one possible 3rd card in the set.

Let's consider an example in which we're given two cards with these attribute values:
2	empty	red	diamonds
3	striped	red	ovals

To form a set, the third card must have these attribute values:

Count: 1 object
Shading: Filled
Color: Red
Shape: Squiggle
Input definition

The first line of an input file for this problem will contain a single integer n (1 ≤ n ≤ 1,000), the number of remaining lines in the file (the number of given pairs of cards). Each of the next n lines will identify a pair of cards. For each given card, four characters will signify the card's attributes.

For Count: 1 = 1 object on the card, 2 = 2 objects on the card, 3 = 3 objects on the card
For Fill: E = Empty, F = Filled, S = Striped
For Color: G = Green, P = Purple, R = Red
For Shape: O = Oval (the letter O), D = Diamond, S = Squiggle
Thus, the input for the given example above (2 empty red diamonds, 3 striped red ovals) would be: "2ERD 3SRO". Similarly, the set-completing card for this example would be "1FRS" (1 filled red squiggle).

Output definition

Your output should contain n lines. Each line should identify the set-completing card for the given pair of input cards, prefaced by a Group label, i.e. "Group " + (test case number) +": " + (attributes for the 3rd card).

Example input

3
2ERD 3SRO 
1SPS 1ERO
1EGD 2SGO
Example output

Group 1: 1FRS
Group 2: 1FGD
Group 3: 3FGS







You maintain a square grid of computers where each one is only connected to the neighboring computers that are directly adjacent to it, i.e. vertically or horizontally. You have discovered, to your chagrin, that several of your computers have been infected with an alien virus. Your healthy computers become infected if two or more of their adjacent neighbors are infected. Which of your computers end up as infected after the infection has spread as far as it can?

Input definition

An input file will contain an n by n square grid of numbers consisting of 0s and 1s. Each of the n rows will contain exactly n binary digits and no whitespace between 0s and 1s. In the grid, 1s represent infected computers and 0s represent healthy ones. The grid is always square and n can range from 7 to 9, inclusive.

Output definition

Your output should contain an n by n square grid of numbers consisting of 0s and 1s, representing the final state of the infection. As before, 1s shall represent infected computers and 0s shall represent healthy ones.

Example input

00000000
01010000
00010000
01001000
00010010
00001000
00001001
01000000
Example output

00000000
01111111
01111111
01111111
01111111
01111111
01111111
01111111





Contoso Fulfillment, a small logistics startup, is celebrating the 2nd anniversary of the company. The marketing team has decided that all shipments will now use a cylindrical 'anniversary' box to commemorate this milestone. Currently, the fulfillment center has everything packed in rectangular prism boxes or triangular prism boxes. All of the boxes are equilateral at their base and
all of the prism boxes are 12 inches tall. The cylindrical 'anniversary' boxes are 13 inches tall. Given a radius for a cylindrical box, your program should figure out if a given prism box will fit strictly inside of it, and thus ship.

Input definition

An input file for this problem will be of the following format:

X;
R,N,L;
R,N,L;
R,N,L;
R,N,L;
...
(X times)
Where:

X = The number of packages the company needs to attempt to fit and ship.
R = Radius of the cylindrical box
N = 3 for a triangular prism box and 4 for a rectangular prism box
L = Length of each side of the base of the prism box
Output definition

The number of boxes that fit in the cylindrical 'anniversary' boxes.

Example input

2;
5,3,1;
2,4,4;
Example output

1







The Contoso Analysis Platform (CAP) stores log files in fixed-size structures called "Nodes", but each instance of the CAP uses different settings to optimize how the incoming logs are stored in each of the nodes.

To handle transforming the incoming nodes, there is a frontend called the Gateway that Outputs Written Nodes (GOWN). Its job is to take the incoming nodes and rewrite them into the format expected by the CAP. To accomplish this, it needs to take in a collection of incoming nodes and repartition them into nodes having the expected number of slots. In addition, some CAP instances want empty slots to be removed from Nodes; other instances, however, expect these empty entries to be preserved as they are used during analysis.

Can you help us get the CAP & GOWN working together?

Input definition

An input file for this problem will contain one header line, followed by a set of input Nodes. The header line will contain an integer specifying how many slots each output node should contain, followed by a colon, and a flag indicating whether or not empty slots should be removed.

Each individual input Node will consist of a number of "slots", where each slot is separated from the next slot by a newline (any empty slots will also be on their own line). Each Node will begin with a [ and end with a ]. A pair of these brackets will also enclose the full set of given input nodes and the brackets will always be on their own lines (which may also contain whitespace). For example, the following Node contains m slots:

[
    Line 1
    Line 2
    ...
    Line m
]
Further, if the input contained N individual Node objects, they would be given in the the following format, where each Node would consist of m+2 lines of the format given above:

[
    Node 1
    Node 2
    ...
    Node N
]
Because the set of input nodes may contain whitespace for readability in a text editor, any of the following would be valid input strings (where \n and \t represent a newline and tab, respectively):

2:True\n[\n[\nA\n\B\n\n]\n[\n\n\nC\n]\n]

2:True\n[\n  [\n    A\n    B\n    \n    ]\n  [\n    \n    \n    C\n  ]\n]

2:True\n[\n\t[\n\tA\n\tB\n\t\n\t]\n\t[\n\t\n\t\n\tC\n\t]\n]
Output definition

Your output should have four header lines, followed by the expected set of output Nodes. More specifically, your output should be:

int OutputNodeCount
int NodeCountDifference
int EmptySlotDifference
int EmptySlotCount
Node[] OutputNodes
Where:

OutputNodeCount is the total number of Nodes written to OutputNodes.
NodeCountDifference is the difference between the count of Nodes in the given input and correct output. This number should be positive if there are more Nodes in OutputNodes than in InputNodes, and should be negative if there are fewer.
EmptySlotDifference is the difference between the combined number of empty slots across all of the Nodes in InputNodes and OutputNodes. This number should be positive if there are more empty slots in all of the Nodes in OutputNodes than in InputNodes, and should be negative if there are fewer.
EmptySlotCount is the total number of empty slots contained across all of the Nodes in OutputNodes.
OutputNodes is the resulting set of output Nodes.
It is noted that all output nodes should remove leading and trailing whitespace from each line. For example, if an input slot contained " demo\t", the corresponding output slot should just be "demo" in the output node.

Example input

3:True
[
	[
		Lorem ipsum dolor sit amet
		consectetur adipiscing elit

	]
	[
		sed do eiusmod tempor incididunt
		ut labore et dolore magna aliqua
		Ut enim ad minim veniam
	]
	[
		quis nostrud exercitation ullamco
	

	]
]
Example output

2
-1
-3
0
[
[
Lorem ipsum dolor sit amet
consectetur adipiscing elit
sed do eiusmod tempor incididunt
]
[
ut labore et dolore magna aliqua
Ut enim ad minim veniam
quis nostrud exercitation ullamco
]
]








Contoso is considering branching its business into a new industry: dry cleaning. Contoso, however, won't just enter a new industry without a ground-breaking strategy. Contoso's new strategy for dry cleaning will be a multi-step process that requires a clothing item to go through a series of machines, much like how home laundry goes through the washer followed by the dryer. The new process, however, will require many more machines and each machine will take a fixed amount of time to process a load.

For example, let's assume 100 loads of laundry need to be processed through 4 machines in order. The time to run each load in the machines are 1, 1, 1, and 3 minutes, in that order. Since the machines run independently, once the first load is done in the first machine, it will be moved to the second machine, and the second load will immediately be started in the first machine. This starts the pipeline. If a machine completes a load, the next machine must be empty for the current load to progress. All loads move instantaneously. For this example, the 100 loads of laundry will complete in 303 minutes.

A new technology has now been created that allows one to combine any number of consecutive machines into a single machine; the new combined machine's processing time is equal to the sum of the original machines' processing times. The capacity of each machine remains the same. For the above example, you could reduce the pipeline to two machines with times of 3 and 3. In that case, the time to complete 100 loads with the reduced pipeline is the same: 303 minutes. If, however we reduced the pipeline to a single machine with a time of 6, the time to complete 100 loads would be 600 minutes. Ouch!

Your program should compute the minimum number of machines the pipeline could be without increasing the time to complete a given number of loads.

Input definition

An input file for this problem will contain two lines. The first line will be two integers, N and M, the number of machines in the pipeline and number of loads to be processed, respectively. The next line of input will contain N space-separated integers where the i-th integer indicates the time to process a load in the i-th machine.

The following bounds apply:
1 <= N <= 1000
N <= M <= 2 * N
Machine load processing times can range from 1 to 100, inclusive.

Output definition

Your output should contain a single integer indicating the minimum number of machines that can be used to complete M loads in the pipeline, without increasing the processing time.

Example input

4 100
1 1 1 3
Example output

2






Pokemon Go is totally still a thing, right? Well, it is to you at least. You've been playing non-stop, but you want to optimize your experience. More specifically, you want to hatch more eggs. In this version of the game, you hatch eggs by walking around and getting credit for the distance you've walked. The game, however, uses a polling model and checks your current position at fixed intervals and calculates the straight line distance between those points. This means that if you aren't walking in a straight line, you aren't getting credit for all of the distance you walked.

For this problem, you will be given a set amount of time to walk along a fixed path of PokeStops and the time interval at which the game queries your position. You must walk the straight line path from PokeStop to PokeStop, and you may never go backward. You also must make it to the final PokeStop within the time limit. Consecutive PokeStops will always be axis aligned, meaning you will always be walking parallel to the x or y axis. You always move at one unit per second. For simplicity, time works in discrete manner. In other words, at each second, you are at an integer set of coordinates.

Your goal is to get credit for the most distance while completing the path in time. You may stop and wait for any number of seconds at any time to increase the distance you receive.

Let's consider an example for which the polling interval is 2 seconds and you have a 4 second time limit. Your path will need to run from (0, 0) to (1, 0) to (1, 1). In this case, you would wait at (1, 0) for 1 second to get credit for one unit of distance at the first polling interval; you would then go to the final stop, for a total of 2 distance units. If, however, you did not wait at (1, 0), you would only get credit for sqrt(2) units of distance.

Note If you make it to the last stop with extra time, but not enough time for a polling interval to pass, assume you wait infinitely at the last stop. (i.e. You do get credit for this movement.)

Input definition

The first line of an input file for this problem will contain 3 integers, N, T, and K, the number of PokeStops, the time limit, and the polling interval, respectively. The following N lines will contain 2 integers describing the (X, Y) coordinates of each PokeStop in the order that you must travel to them.

The following constraints apply:

2 ≤ N ≤ 10
3 ≤ K ≤ 100
-105 < X, Y < 105
D ≤ T ≤ D + (NK / 2) where D is the total distance of the path that needs to be walked.
You will always have enough time to complete the path.
Output definition

Your output should contain the maximum distance you could receive credit for with the given constraints. The value should be rounded to 2 decimal places.

Example input

7 60 12
0 0
0 10
10 10
10 0
20 0
20 10
30 10
Example output

46.77